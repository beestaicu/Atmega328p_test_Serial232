
Atmega328p_test_Serial232.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000015c  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800102  00800102  000001f2  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ca  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bf  00000000  00000000  00000bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000409  00000000  00000000  00001385  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00001790  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047f  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000105  00000000  00000000  00001cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001dc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e5       	ldi	r30, 0x5C	; 92
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  9e:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
#include "USART_M328P.h"
char buffer[20];
volatile uint8_t StrRx_flag=0;

ISR(USART_RX_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	buffer[10]=UDR0;         //Read USART data register
  b2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  b6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <buffer+0xa>
	StrRx_flag=1;        //Set String received flag
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	      
}//end ISR USART
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <main>:

int main(void)
{
	DDRB = 0b11111111;//PB as output
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	84 b9       	out	0x04, r24	; 4
	USART0Init(); // initialize usart in microcontroller
  d0:	0e 94 81 00 	call	0x102	; 0x102 <USART0Init>
	sei(); // enable global interrupt
  d4:	78 94       	sei
	USART_putstring("A"); // send string to bluetooth
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	0e 94 9c 00 	call	0x138	; 0x138 <USART_putstring>
	
	while (1)
	{
		if (StrRx_flag==1 ){
  de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  e2:	81 30       	cpi	r24, 0x01	; 1
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x12>
			StrRx_flag =0;
  e6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			PORTB |= (1<<PORTB4);
  ea:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	89 e6       	ldi	r24, 0x69	; 105
  f0:	98 e1       	ldi	r25, 0x18	; 24
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x26>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x30>
  fc:	00 00       	nop
			_delay_ms(500);
			PORTB &=~ (1<<PORTB4);
  fe:	2c 98       	cbi	0x05, 4	; 5
 100:	ee cf       	rjmp	.-36     	; 0xde <main+0x12>

00000102 <USART0Init>:
 102:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 106:	87 e6       	ldi	r24, 0x67	; 103
 108:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 10c:	e2 ec       	ldi	r30, 0xC2	; 194
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	86 60       	ori	r24, 0x06	; 6
 114:	80 83       	st	Z, r24
 116:	e1 ec       	ldi	r30, 0xC1	; 193
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	88 61       	ori	r24, 0x18	; 24
 11e:	80 83       	st	Z, r24
 120:	80 81       	ld	r24, Z
 122:	80 68       	ori	r24, 0x80	; 128
 124:	80 83       	st	Z, r24
 126:	08 95       	ret

00000128 <USART0SendByte>:
 128:	e0 ec       	ldi	r30, 0xC0	; 192
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	90 81       	ld	r25, Z
 12e:	95 ff       	sbrs	r25, 5
 130:	fd cf       	rjmp	.-6      	; 0x12c <USART0SendByte+0x4>
 132:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 136:	08 95       	ret

00000138 <USART_putstring>:
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	ec 01       	movw	r28, r24
 13e:	88 81       	ld	r24, Y
 140:	88 23       	and	r24, r24
 142:	39 f0       	breq	.+14     	; 0x152 <USART_putstring+0x1a>
 144:	21 96       	adiw	r28, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 94 00 	call	0x128	; 0x128 <USART0SendByte>
 14c:	89 91       	ld	r24, Y+
 14e:	81 11       	cpse	r24, r1
 150:	fa cf       	rjmp	.-12     	; 0x146 <USART_putstring+0xe>
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
